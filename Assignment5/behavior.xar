<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="smallTalk" id="1" localization="8" tooltip="" x="327" y="146"><dialogFile>../smallTalk/smallTalk.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="X" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="Y" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="T" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="go" type="1" type_size="1" nature="2" inner="0" tooltip="" id="8" /></Box><Box name="Set Language" id="2" localization="8" tooltip="Set the language of your robot for the current application. Your robot will speak and understand the selected language as long as your application has focus. Any following call to ALSpeechRecognition (Speech Reco. box for instance), ALTextToSpeech (Say box for instance) or ALDialog will use this language.&#x0A;" x="116" y="67"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="English" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Move To" id="3" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="608" y="143"><bitmap>media/images/box/movement/walk_forward.png</bitmap><script language="4"><content><![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        import almath
        import math
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03
        self.myX = 0
        self.myY = 0
        self.myT = 0

        self.obs = almath.Pose2D(1.9,1.7,0.0)
        self.k_rep= 1.0
        self.p_not= 1.0


    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_X(self, string):
        self.myX = int(string)

    def onInput_Y(self, string):
        self.myY = int(string)

    def onInput_T(self, string):
        self.myT = math.radians(float(string))

    def onInput_onStart(self):
        import almath
        import math
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.myX, self.myY, self.myT)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)

        currentPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        positionError = currentPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)

        myDistance = math.sqrt(positionError.x*positionError.x + positionError.y*positionError.y)


        vmyX = float(positionError.x)/myDistance
        vmyY = float(positionError.y)/myDistance

        obsDistance = almath.Pose2D(self.obs.x, self.obs.y, self.obs.theta)

        tukka = currentPosition * obsDistance

        self.motion.moveToward(0, 0, self.myT)

        while (abs(positionError.x) > self.positionErrorThresholdPos
            or abs(positionError.y) > self.positionErrorThresholdPos):


            obs_error=currentPosition.diff(tukka)
            p_q=float(math.sqrt(obs_error.x*obs_error.x + obs_error.y*obs_error.y))

            if(p_q < self.p_not):
                obs_force = -(self.k_rep)*((1/p_q)-(1/self.p_not))*((currentPosition.diff(tukka))/(p_q*p_q*p_q))
                my_Force = float(math.sqrt(obs_force.x*obs_force.x + obs_force.y*obs_force.y))
                #obs_force.x = obs_force.x/my_Force
                #obs_force.y = obs_force.y/my_Force

            else:
                my_Force = 0
                obs_force = almath.Pose2D(0.0,0.0,0.0)


            #vmyX = (float(positionError.x)/myDistance) + obs_force.x
            #vmyY = (float(positionError.y)/myDistance) + obs_force.y
            vmyT = self.myT
            vmyX = (float(positionError.x) + obs_force.x)/(myDistance + my_Force)
            vmyY = (float(positionError.y) + obs_force.y)/(myDistance + my_Force)
            self.motion.moveToward(vmyX, vmyY, vmyT)
            currentPosition = almath.Pose2D(self.motion.getRobotPosition(True))
            positionError = currentPosition.diff(expectedEndPosition)
            positionError.theta = almath.modulo2PI(positionError.theta)
            myDistance = math.sqrt(positionError.x*positionError.x + positionError.y*positionError.y)


        self.motion.moveToward(0, 0, 0)
        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))


    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="X" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="Y" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Input name="T" type="3" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="7" /><Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="8" /><Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.575019" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="9" /><Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="10" /><Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="11" /><Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="12" /><Resource name="Legs" type="Lock" timeout="0" /></Box><Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="4" outputowner="1" indexofoutput="5" /><Link inputowner="3" indexofinput="5" outputowner="1" indexofoutput="6" /><Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="8" /><Link inputowner="3" indexofinput="6" outputowner="1" indexofoutput="7" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>